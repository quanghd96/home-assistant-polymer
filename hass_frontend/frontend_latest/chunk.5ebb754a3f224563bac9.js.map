{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/panels/config/entity_registry/dialog-entity-registry-detail.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","define","mixinBehaviors","__webpack_require__","r","__webpack_exports__","lit_element__WEBPACK_IMPORTED_MODULE_0__","_resources_styles__WEBPACK_IMPORTED_MODULE_4__","_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_5__","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_6__","LitElement","[object Object]","args","super","hass","_name","_entityId","_error","_params","_submitting","properties","params","undefined","entry","name","entity_id","updateComplete","render","html","stateObj","states","invalidDomainUpdate","computeDomain","trim","_openedChanged","localize","_nameChanged","computeStateName","_entityIdChanged","_deleteEntry","_updateEntry","ev","detail","value","updateEntry","new_entity_id","err","message","removeEntry","styles","haStyleDialog","css"],"mappings":"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","file":"chunk.5ebb754a3f224563bac9.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  PropertyDeclarations,\n  CSSResult,\n  TemplateResult,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../components/dialog/ha-paper-dialog\";\n\nimport { EntityRegistryDetailDialogParams } from \"./show-dialog-entity-registry-detail\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport computeDomain from \"../../../common/entity/compute_domain\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport computeStateName from \"../../../common/entity/compute_state_name\";\n\nclass DialogEntityRegistryDetail extends LitElement {\n  public hass!: HomeAssistant;\n  private _name!: string;\n  private _entityId!: string;\n  private _error?: string;\n  private _params?: EntityRegistryDetailDialogParams;\n  private _submitting?: boolean;\n\n  static get properties(): PropertyDeclarations {\n    return {\n      _error: {},\n      _name: {},\n      _entityId: {},\n      _params: {},\n    };\n  }\n\n  public async showDialog(\n    params: EntityRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry.name || \"\";\n    this._entityId = this._params.entry.entity_id;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n    const entry = this._params.entry;\n    const stateObj: HassEntity | undefined = this.hass.states[entry.entity_id];\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this._params.entry.entity_id);\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>${entry.entity_id}</h2>\n        <paper-dialog-scrollable>\n          ${!stateObj\n            ? html`\n                <div>\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entity_registry.editor.unavailable\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._error\n            ? html`\n                <div class=\"error\">${this._error}</div>\n              `\n            : \"\"}\n          <div class=\"form\">\n            <paper-input\n              .value=${this._name}\n              @value-changed=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.dialogs.more_info_settings.name\")}\n              .placeholder=${stateObj ? computeStateName(stateObj) : \"\"}\n              .disabled=${this._submitting}\n            ></paper-input>\n            <paper-input\n              .value=${this._entityId}\n              @value-changed=${this._entityIdChanged}\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_settings.entity_id\"\n              )}\n              error-message=\"Domain needs to stay the same\"\n              .invalid=${invalidDomainUpdate}\n              .disabled=${this._submitting}\n            ></paper-input>\n          </div>\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button\n            class=\"warning\"\n            @click=\"${this._deleteEntry}\"\n            .disabled=${this._submitting}\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.entity_registry.editor.delete\"\n            )}\n          </mwc-button>\n          <mwc-button\n            @click=\"${this._updateEntry}\"\n            .disabled=${invalidDomainUpdate || this._submitting}\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.entity_registry.editor.update\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._entityId = ev.detail.value;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name: this._name.trim() || null,\n        new_entity_id: this._entityId.trim(),\n      });\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n        }\n        .form {\n          padding-bottom: 24px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-registry-detail\": DialogEntityRegistryDetail;\n  }\n}\n\ncustomElements.define(\n  \"dialog-entity-registry-detail\",\n  DialogEntityRegistryDetail\n);\n"],"sourceRoot":""}