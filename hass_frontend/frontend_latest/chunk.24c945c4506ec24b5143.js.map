{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-entity-editor.ts","webpack:///./src/panels/lovelace/editor/process-editor-entities.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-entities-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","decorators","property","key","entities","html","map","entityConf","index","hass","entity","_valueChanged","_addEntity","ev","target","newConfigEntities","concat","fireEvent","splice","Object","assign","static","css","LitElement","processEditorEntities","entitiesConfigStruct","union","name","cardConfigStruct","type","title","theme","show_header_toggle","HuiEntitiesCardEditor","config","_config","_configEntities","configElementStyle","_title","_theme","configValue","detail","undefined","checked"],"mappings":"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","file":"chunk.24c945c4506ec24b5143.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected entities?: EntityConfig[];\n\n  protected render(): TemplateResult | void {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>Entities</h3>\n      <div class=\"entities\">\n        ${this.entities.map((entityConf, index) => {\n          return html`\n            <ha-entity-picker\n              .hass=\"${this.hass}\"\n              .value=\"${entityConf.entity}\"\n              .index=\"${index}\"\n              @change=\"${this._valueChanged}\"\n              allow-custom-entity\n            ></ha-entity-picker>\n          `;\n        })}\n        <ha-entity-picker\n          .hass=\"${this.hass}\"\n          @change=\"${this._addEntity}\"\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _addEntity(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: target.value as string,\n    });\n    target.value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _valueChanged(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newConfigEntities = this.entities!.concat();\n\n    if (target.value === \"\") {\n      newConfigEntities.splice(target.index!, 1);\n    } else {\n      newConfigEntities[target.index!] = {\n        ...newConfigEntities[target.index!],\n        entity: target.value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .entities {\n        padding-left: 20px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n","import { EntityConfig } from \"../entity-rows/types\";\n\nexport function processEditorEntities(entities): EntityConfig[] {\n  return entities.map((entityConf) => {\n    if (typeof entityConf === \"string\") {\n      return { entity: entityConf };\n    }\n    return entityConf;\n  });\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-toggle-button/paper-toggle-button\";\n\nimport \"../../../../components/entity/state-badge\";\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\n\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport {\n  EntitiesCardConfig,\n  EntitiesCardEntityConfig,\n} from \"../../cards/types\";\n\nconst entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string|number?\",\n  theme: \"string?\",\n  show_header_toggle: \"boolean?\",\n  entities: [entitiesConfigStruct],\n});\n\n@customElement(\"hui-entities-card-editor\")\nexport class HuiEntitiesCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardConfig;\n\n  @property() private _configEntities?: EntitiesCardEntityConfig[];\n\n  public setConfig(config: EntitiesCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Title\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=\"${this.hass}\"\n          .value=\"${this._theme}\"\n          .configValue=\"${\"theme\"}\"\n          @theme-changed=\"${this._valueChanged}\"\n        ></hui-theme-select-editor>\n        <paper-toggle-button\n          ?checked=\"${this._config!.show_header_toggle !== false}\"\n          .configValue=\"${\"show_header_toggle\"}\"\n          @change=\"${this._valueChanged}\"\n          >Show Header Toggle?</paper-toggle-button\n        >\n      </div>\n      <hui-entity-editor\n        .hass=\"${this.hass}\"\n        .entities=\"${this._configEntities}\"\n        @entities-changed=\"${this._valueChanged}\"\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n\n    if (\n      (target.configValue! === \"title\" && target.value === this._title) ||\n      (target.configValue! === \"theme\" && target.value === this._theme)\n    ) {\n      return;\n    }\n\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue]:\n            target.checked !== undefined ? target.checked : target.value,\n        };\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-editor\": HuiEntitiesCardEditor;\n  }\n}\n"],"sourceRoot":""}