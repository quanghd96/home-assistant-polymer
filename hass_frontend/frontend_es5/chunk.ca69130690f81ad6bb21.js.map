{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/components/hui-entity-editor.ts","webpack:///./src/panels/lovelace/editor/process-editor-entities.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-entities-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","HuiEntityEditor","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","kind","decorators","property","key","_this2","entities","html","_templateObject2","map","entityConf","index","_templateObject3","hass","entity","_valueChanged","_addEntity","_templateObject","ev","target","newConfigEntities","fireEvent","splice","Object","assign","static","css","_templateObject4","LitElement","processEditorEntities","entitiesConfigStruct","union","name","cardConfigStruct","type","title","theme","show_header_toggle","HuiEntitiesCardEditor","config","_config","_configEntities","configElementStyle","_title","_theme","configValue","detail","undefined","checked"],"mappings":"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","file":"chunk.ca69130690f81ad6bb21.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected entities?: EntityConfig[];\n\n  protected render(): TemplateResult | void {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>Entities</h3>\n      <div class=\"entities\">\n        ${this.entities.map((entityConf, index) => {\n          return html`\n            <ha-entity-picker\n              .hass=\"${this.hass}\"\n              .value=\"${entityConf.entity}\"\n              .index=\"${index}\"\n              @change=\"${this._valueChanged}\"\n              allow-custom-entity\n            ></ha-entity-picker>\n          `;\n        })}\n        <ha-entity-picker\n          .hass=\"${this.hass}\"\n          @change=\"${this._addEntity}\"\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _addEntity(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: target.value as string,\n    });\n    target.value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _valueChanged(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newConfigEntities = this.entities!.concat();\n\n    if (target.value === \"\") {\n      newConfigEntities.splice(target.index!, 1);\n    } else {\n      newConfigEntities[target.index!] = {\n        ...newConfigEntities[target.index!],\n        entity: target.value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .entities {\n        padding-left: 20px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n","import { EntityConfig } from \"../entity-rows/types\";\n\nexport function processEditorEntities(entities): EntityConfig[] {\n  return entities.map((entityConf) => {\n    if (typeof entityConf === \"string\") {\n      return { entity: entityConf };\n    }\n    return entityConf;\n  });\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-toggle-button/paper-toggle-button\";\n\nimport \"../../../../components/entity/state-badge\";\nimport \"../../components/hui-theme-select-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\n\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport {\n  EntitiesCardConfig,\n  EntitiesCardEntityConfig,\n} from \"../../cards/types\";\n\nconst entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string|number?\",\n  theme: \"string?\",\n  show_header_toggle: \"boolean?\",\n  entities: [entitiesConfigStruct],\n});\n\n@customElement(\"hui-entities-card-editor\")\nexport class HuiEntitiesCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardConfig;\n\n  @property() private _configEntities?: EntitiesCardEntityConfig[];\n\n  public setConfig(config: EntitiesCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"Backend-selected\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Title\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <hui-theme-select-editor\n          .hass=\"${this.hass}\"\n          .value=\"${this._theme}\"\n          .configValue=\"${\"theme\"}\"\n          @theme-changed=\"${this._valueChanged}\"\n        ></hui-theme-select-editor>\n        <paper-toggle-button\n          ?checked=\"${this._config!.show_header_toggle !== false}\"\n          .configValue=\"${\"show_header_toggle\"}\"\n          @change=\"${this._valueChanged}\"\n          >Show Header Toggle?</paper-toggle-button\n        >\n      </div>\n      <hui-entity-editor\n        .hass=\"${this.hass}\"\n        .entities=\"${this._configEntities}\"\n        @entities-changed=\"${this._valueChanged}\"\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n\n    if (\n      (target.configValue! === \"title\" && target.value === this._title) ||\n      (target.configValue! === \"theme\" && target.value === this._theme)\n    ) {\n      return;\n    }\n\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue]:\n            target.checked !== undefined ? target.checked : target.value,\n        };\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-card-editor\": HuiEntitiesCardEditor;\n  }\n}\n"],"sourceRoot":""}