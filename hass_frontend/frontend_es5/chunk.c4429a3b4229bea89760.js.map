{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/components/hui-entity-editor.ts","webpack:///./src/panels/lovelace/editor/process-editor-entities.ts","webpack:///./src/panels/lovelace/components/hui-input-list-editor.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-map-card-editor.ts"],"names":["Polymer","_template","html","_templateObject","is","rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","computeStateName","entity_id","HaEntityPicker","property","type","Boolean","attribute","memoizeOne","hass","domainFilter","entityFilter","states","entityIds","Object","keys","filter","eid","substr","indexOf","sort","map","key","_this2","value","changedProps","_get","_getPrototypeOf","prototype","this","call","has","_opened","_hass","_getStates","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","_templateObject2","length","_templateObject3","ev","detail","_this3","setTimeout","fireEvent","css","_templateObject4","LitElement","customElements","define","behaviors","PaperItemBehavior","__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","includes","icon","configElementStyle","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","HuiEntityEditor","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","args","Array","_key","apply","concat","_assertThisInitialized","_inherits","kind","decorators","entities","entityConf","index","entity","_addEntity","target","newConfigEntities","splice","assign","static","processEditorEntities","HuiInputListEditor","listEntry","inputLabel","_consolidateEntries","_removeEntry","_addEntry","newEntries","blur","stopPropagation","parent","currentTarget","parentElement","entitiesConfigStruct","union","name","cardConfigStruct","title","aspect_ratio","default_zoom","dark_mode","geo_location_sources","HuiMapCardEditor","hui_map_card_editor_decorate","hui_map_card_editor_classCallCheck","hui_map_card_editor_getPrototypeOf","hui_map_card_editor_assertThisInitialized","hui_map_card_editor_inherits","config","_config","_configEntities","NaN","hui_map_card_editor_templateObject2","_title","_aspect_ratio","_default_zoom","_dark_mode","_entitiesValueChanged","_geo_location_sources","hui_map_card_editor_templateObject","configValue","isNaN","Number","_defineProperty","checked","hui_map_card_editor_templateObject3"],"mappings":"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","file":"chunk.c4429a3b4229bea89760.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { EntityConfig } from \"../entity-rows/types\";\n\nimport \"../../../components/entity/ha-entity-picker\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-entity-editor\")\nexport class HuiEntityEditor extends LitElement {\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected entities?: EntityConfig[];\n\n  protected render(): TemplateResult | void {\n    if (!this.entities) {\n      return html``;\n    }\n\n    return html`\n      <h3>Entities</h3>\n      <div class=\"entities\">\n        ${this.entities.map((entityConf, index) => {\n          return html`\n            <ha-entity-picker\n              .hass=\"${this.hass}\"\n              .value=\"${entityConf.entity}\"\n              .index=\"${index}\"\n              @change=\"${this._valueChanged}\"\n              allow-custom-entity\n            ></ha-entity-picker>\n          `;\n        })}\n        <ha-entity-picker\n          .hass=\"${this.hass}\"\n          @change=\"${this._addEntity}\"\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _addEntity(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newConfigEntities = this.entities!.concat({\n      entity: target.value as string,\n    });\n    target.value = \"\";\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  private _valueChanged(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    const newConfigEntities = this.entities!.concat();\n\n    if (target.value === \"\") {\n      newConfigEntities.splice(target.index!, 1);\n    } else {\n      newConfigEntities[target.index!] = {\n        ...newConfigEntities[target.index!],\n        entity: target.value!,\n      };\n    }\n\n    fireEvent(this, \"entities-changed\", { entities: newConfigEntities });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .entities {\n        padding-left: 20px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entity-editor\": HuiEntityEditor;\n  }\n}\n","import { EntityConfig } from \"../entity-rows/types\";\n\nexport function processEditorEntities(entities): EntityConfig[] {\n  return entities.map((entityConf) => {\n    if (typeof entityConf === \"string\") {\n      return { entity: entityConf };\n    }\n    return entityConf;\n  });\n}\n","import {\n  html,\n  css,\n  LitElement,\n  property,\n  TemplateResult,\n  CSSResult,\n  customElement,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\n\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-input-list-editor\")\nexport class HuiInputListEditor extends LitElement {\n  @property() protected value?: string[];\n  @property() protected hass?: HomeAssistant;\n  @property() protected inputLabel?: string;\n\n  protected render(): TemplateResult | void {\n    if (!this.value) {\n      return html``;\n    }\n\n    return html`\n      ${this.value.map((listEntry, index) => {\n        return html`\n          <paper-input\n            label=\"${this.inputLabel}\"\n            .value=\"${listEntry}\"\n            .configValue=\"${\"entry\"}\"\n            .index=\"${index}\"\n            @value-changed=\"${this._valueChanged}\"\n            @blur=\"${this._consolidateEntries}\"\n            ><paper-icon-button\n              slot=\"suffix\"\n              class=\"clear-button\"\n              icon=\"hass:close\"\n              no-ripple\n              @click=\"${this._removeEntry}\"\n              >Clear</paper-icon-button\n            ></paper-input\n          >\n        `;\n      })}\n      <paper-input\n        label=\"${this.inputLabel}\"\n        @change=\"${this._addEntry}\"\n      ></paper-input>\n    `;\n  }\n\n  private _addEntry(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newEntries = this.value!.concat(target.value as string);\n    target.value = \"\";\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n    (ev.target! as LitElement).blur();\n  }\n\n  private _valueChanged(ev: Event): void {\n    ev.stopPropagation();\n    const target = ev.target! as EditorTarget;\n    const newEntries = this.value!.concat();\n    newEntries[target.index!] = target.value!;\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  private _consolidateEntries(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      const newEntries = this.value!.concat();\n      newEntries.splice(target.index!, 1);\n      fireEvent(this, \"value-changed\", {\n        value: newEntries,\n      });\n    }\n  }\n\n  private _removeEntry(ev: Event): void {\n    const parent = (ev.currentTarget as any).parentElement;\n    const newEntries = this.value!.concat();\n    newEntries.splice(parent.index!, 1);\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-list-editor\": HuiInputListEditor;\n  }\n}\n","import {\n  html,\n  css,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  CSSResult,\n} from \"lit-element\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-input-list-editor\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { EntityConfig } from \"../../entity-rows/types\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { MapCardConfig } from \"../../cards/types\";\n\nconst entitiesConfigStruct = struct.union([\n  {\n    entity: \"entity-id\",\n    name: \"string?\",\n    icon: \"icon?\",\n  },\n  \"entity-id\",\n]);\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  title: \"string?\",\n  aspect_ratio: \"string?\",\n  default_zoom: \"number?\",\n  dark_mode: \"boolean?\",\n  entities: [entitiesConfigStruct],\n  geo_location_sources: \"array?\",\n});\n\n@customElement(\"hui-map-card-editor\")\nexport class HuiMapCardEditor extends LitElement implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: MapCardConfig;\n\n  @property() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: MapCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _aspect_ratio(): string {\n    return this._config!.aspect_ratio || \"\";\n  }\n\n  get _default_zoom(): number {\n    return this._config!.default_zoom || NaN;\n  }\n\n  get _geo_location_sources(): string[] {\n    return this._config!.geo_location_sources || [];\n  }\n\n  get _dark_mode(): boolean {\n    return this._config!.dark_mode || false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <paper-input\n          label=\"Title\"\n          .value=\"${this._title}\"\n          .configValue=\"${\"title\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <paper-input\n            label=\"Aspect Ratio\"\n            .value=\"${this._aspect_ratio}\"\n            .configValue=\"${\"aspect_ratio\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <paper-input\n            label=\"Default Zoom\"\n            type=\"number\"\n            .value=\"${this._default_zoom}\"\n            .configValue=\"${\"default_zoom\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n        </div>\n        <paper-toggle-button\n          ?checked=\"${this._dark_mode !== false}\"\n          .configValue=\"${\"dark_mode\"}\"\n          @change=\"${this._valueChanged}\"\n          >Dark Mode?</paper-toggle-button\n        >\n        <hui-entity-editor\n          .hass=\"${this.hass}\"\n          .entities=\"${this._configEntities}\"\n          @entities-changed=\"${this._entitiesValueChanged}\"\n        ></hui-entity-editor>\n        <h3>Geolocation Sources</h3>\n        <div class=\"geo_location_sources\">\n          <hui-input-list-editor\n            inputLabel=\"Source\"\n            .hass=\"${this.hass}\"\n            .value=\"${this._geo_location_sources}\"\n            .configValue=\"${\"geo_location_sources\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></hui-input-list-editor>\n        </div>\n      </div>\n    `;\n  }\n\n  private _entitiesValueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config.entities = ev.detail.entities;\n      this._configEntities = processEditorEntities(this._config.entities);\n      fireEvent(this, \"config-changed\", { config: this._config });\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<any>): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (\n      target.configValue &&\n      ev.detail &&\n      this[`_${target.configValue}`] === ev.detail.value\n    ) {\n      return;\n    }\n    if (target.configValue && ev.detail) {\n      if (\n        ev.detail.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(ev.detail.value)))\n      ) {\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = ev.detail.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = {\n          ...this._config,\n          [target.configValue]:\n            target.checked !== undefined ? target.checked : value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .geo_location_sources {\n        padding-left: 20px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-map-card-editor\": HuiMapCardEditor;\n  }\n}\n"],"sourceRoot":""}